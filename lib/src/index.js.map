{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport { Launcher } from 'chrome-launcher';\nimport { getRandomPort } from 'chrome-launcher/random-port';\nimport * as CDP from 'chrome-remote-interface';\nimport * as fs from 'fs';\nimport { Readable, Stream } from 'stream';\n\nimport { ChromePrintOptions } from './ChromePrintOptions';\nimport * as CompletionTrigger from './CompletionTrigger';\nimport { CreateResult } from './CreateResult';\n\nexport { CompletionTrigger, CreateResult };\n\n/**\n * PDF generation options.\n *\n * @export\n * @interface CreateOptions\n */\nexport interface CreateOptions {\n  /**\n   * Path to Chrome binary.\n   * This is passed to ChromeLauncher.\n   * Needed to make sure we are using the correct version of Chrome.\n   *\n   * @type {string}\n   * @memberof CreateOptions\n   */\n  chromePath?: string;\n\n  /**\n   * The host to connect to Chrome at.\n   * If set, it attempts to connect to Chrome.\n   * If this and port are not set, it spawns\n   * Chrome for the duration of the PDF generation.\n   *\n   * @type {string}\n   * @memberof CreateOptions\n   */\n  host?: string;\n\n  /**\n   * The port to connect to Chrome with.\n   * If set, it attempts to connect to Chrome.\n   * If this and host are not set, it spawns\n   * Chrome for the duration of the PDF generation.\n   *\n   * @type {number}\n   * @memberof CreateOptions\n   */\n  port?: number;\n\n  /**\n   * The options to pass to Chrome's Page.printToPDF.\n   * Note: these require Chrome >= 60.\n   *\n   * @type {ChromePrintOptions}\n   * @memberof CreateOptions\n   */\n  printOptions?: ChromePrintOptions;\n\n  /**\n   * An optional CompletionTrigger to wait for before\n   * printing the rendered page to a PDF.\n   *\n   * @type {CompletionTrigger.CompletionTrigger}\n   * @memberof CreateOptions\n   */\n  completionTrigger?: CompletionTrigger.CompletionTrigger;\n\n  /**\n   * The time in milliseconds to wait until timing out.\n   */\n  timeout?: number;\n\n  /**\n   * A private flag to signify the operation has been canceled.\n   */\n  _canceled?: boolean;\n}\n\n/**\n * A message that is sent with a Promise rejection in\n * case of a timeout.\n */\nconst timeoutMessage = 'HtmlPdf.create() timed out.';\n\n/**\n * Generates a PDF from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html the HTML string.\n * @param {Options} [options] the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nexport async function create(html: string, options?: CreateOptions): Promise<CreateResult> {\n  return new Promise<CreateResult>(async (resolve, reject) => {\n    const myOptions = Object.assign({}, options);\n    let chrome: Launcher;\n\n    myOptions._canceled = false;\n    if (myOptions.timeout >= 0) {\n      setTimeout(() => {\n        myOptions._canceled = true;\n        reject(timeoutMessage);\n      }, myOptions.timeout);\n    }\n\n    await throwIfCanceled(myOptions);\n    if (!myOptions.host && !myOptions.port) {\n      myOptions.port = await getRandomPort();\n      await throwIfCanceled(myOptions);\n      chrome = await launchChrome(myOptions);\n    }\n\n    try {\n      return await generate(html, myOptions);\n    } finally {\n      if (chrome) {\n        await chrome.kill();\n      }\n    }\n  });\n}\n\n/**\n * Connects to Chrome and generates a PDF from HTML or a URL.\n *\n * @param {string} html the HTML string or URL.\n * @param {CreateOptions} options the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nasync function generate(html: string, options: CreateOptions): Promise<CreateResult>  {\n  let client: any;\n  try {\n    await throwIfCanceled(options);\n    client = await CDP(options);\n    const {Page} = client;\n    await Page.enable(); // Enable Page events\n    const url = /^(https?|file|data):/i.test(html) ? html : `data:text/html,${html}`;\n    await throwIfCanceled(options);\n    await Page.navigate({url});\n    await throwIfCanceled(options);\n    await Page.loadEventFired();\n    if (options.completionTrigger) {\n      await throwIfCanceled(options);\n      const waitResult = await options.completionTrigger.wait(client);\n      if (waitResult && waitResult.exceptionDetails) {\n        throw new Error(waitResult.result.value);\n      }\n    }\n    await throwIfCanceled(options);\n    // https://chromedevtools.github.io/debugger-protocol-viewer/tot/Page/#method-printToPDF\n    const pdf = await Page.printToPDF(options.printOptions);\n    await throwIfCanceled(options);\n    return new CreateResult(pdf.data);\n  } finally {\n    client.close();\n  }\n}\n\n// TODO add unit tests\nasync function throwIfCanceled(options: CreateOptions) {\n  if (options._canceled) {\n    console.log(Date.now()); // TODO use to see where lengthy parts are\n    throw timeoutMessage;\n  }\n}\n\n/**\n * Launches Chrome and listens on the specified port.\n *\n * @param {number} port the port for the launched Chrome to listen on.\n * @returns {Promise<Launcher>} The launched Launcher instance.\n */\nasync function launchChrome(options: CreateOptions): Promise<Launcher> {\n  const launcher = new Launcher({\n    chromePath: options.chromePath, \n    port: options.port,\n    chromeFlags: [\n      '--disable-gpu',\n      '--headless',\n    ],\n  });\n  try {\n    await launcher.launch();\n    return launcher;\n  } catch (err) {\n    await launcher.kill();\n    throw err;\n  }\n}\n"],"sourceRoot":"../.."}